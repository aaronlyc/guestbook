/*
Copyright 2022 My name.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v2

import (
	v2 "guestbook/apis/test1/v2"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// Guest1Lister helps list Guest1s.
// All objects returned here must be treated as read-only.
type Guest1Lister interface {
	// List lists all Guest1s in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v2.Guest1, err error)
	// Guest1s returns an object that can list and get Guest1s.
	Guest1s(namespace string) Guest1NamespaceLister
	Guest1ListerExpansion
}

// guest1Lister implements the Guest1Lister interface.
type guest1Lister struct {
	indexer cache.Indexer
}

// NewGuest1Lister returns a new Guest1Lister.
func NewGuest1Lister(indexer cache.Indexer) Guest1Lister {
	return &guest1Lister{indexer: indexer}
}

// List lists all Guest1s in the indexer.
func (s *guest1Lister) List(selector labels.Selector) (ret []*v2.Guest1, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v2.Guest1))
	})
	return ret, err
}

// Guest1s returns an object that can list and get Guest1s.
func (s *guest1Lister) Guest1s(namespace string) Guest1NamespaceLister {
	return guest1NamespaceLister{indexer: s.indexer, namespace: namespace}
}

// Guest1NamespaceLister helps list and get Guest1s.
// All objects returned here must be treated as read-only.
type Guest1NamespaceLister interface {
	// List lists all Guest1s in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v2.Guest1, err error)
	// Get retrieves the Guest1 from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v2.Guest1, error)
	Guest1NamespaceListerExpansion
}

// guest1NamespaceLister implements the Guest1NamespaceLister
// interface.
type guest1NamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Guest1s in the indexer for a given namespace.
func (s guest1NamespaceLister) List(selector labels.Selector) (ret []*v2.Guest1, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v2.Guest1))
	})
	return ret, err
}

// Get retrieves the Guest1 from the indexer for a given namespace and name.
func (s guest1NamespaceLister) Get(name string) (*v2.Guest1, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v2.Resource("guest1"), name)
	}
	return obj.(*v2.Guest1), nil
}
